const Reminder = require("../models/Reminder");

/**
 * üìå ƒê·ªãnh nghƒ©a job g·ª≠i nh·∫Øc nh·ªü
 */
exports.defineReminderJob = (agenda, io) => {
  agenda.define("sendReminder", async (job) => {
    try {
      const { reminderId, userId, message } = job.attrs.data;

      if (!reminderId || !userId) {
        console.error("‚ùå Thi·∫øu th√¥ng tin reminderId ho·∫∑c userId!");
        return;
      }

      // T√¨m reminder t·ª´ database
      const reminder = await Reminder.findById(reminderId);

      if (!reminder) {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y Reminder ID: ${reminderId}`);
        return;
      }

      // Ki·ªÉm tra xem reminder c√≥ c√≤n active kh√¥ng
      if (!reminder.isActive) {
        console.log(`‚ùå Reminder ID: ${reminderId} ƒë√£ b·ªã h·ªßy, kh√¥ng g·ª≠i th√¥ng b√°o`);
        return;
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa reminder
      reminder.status = "sent";
      reminder.sentAt = new Date();
      await reminder.save();

      // S·ª≠ d·ª•ng message t·ª´ reminder trong database thay v√¨ t·ª´ job data
      const reminderMessage = reminder.message || message;

      console.log(`üîî [Nh·∫Øc nh·ªü] User ${userId}: ${reminderMessage}`);

      // G·ª≠i th√¥ng b√°o ƒë·∫øn client th√¥ng qua socket
      io.to(userId.toString()).emit("mealReminder", {
        id: reminder._id,
        userId: userId.toString(), // Th√™m userId v√†o payload
        mealPlanId: reminder.mealPlanId,
        mealDayId: reminder.mealDayId,
        mealId: reminder.mealId,
        message: reminderMessage,
        timestamp: reminder.sentAt,
      });
    } catch (error) {
      console.error("‚ùå L·ªói trong job send reminder:", error);
    }
  });
};

/**
 * üïí H√†m l√™n l·ªãch g·ª≠i nh·∫Øc nh·ªü
 */
exports.scheduleReminderJob = async (agenda, remindTime, reminderId, userId, message = "") => {
  try {
    if (!reminderId || !userId) {
      throw new Error("‚ùå reminderId ho·∫∑c userId kh√¥ng h·ª£p l·ªá!");
    }

    const reminder = await Reminder.findById(reminderId);
    if (!reminder) {
      throw new Error(`‚ùå Kh√¥ng t√¨m th·∫•y Reminder ID: ${reminderId}`);
    }
    if (!reminder.isActive) {
      throw new Error(`‚ùå Reminder ID: ${reminderId} ƒë√£ b·ªã h·ªßy, kh√¥ng l√™n l·ªãch`);
    }

    const scheduledTime = remindTime || "in 5 minutes";
    const jobData = {
      reminderId: reminderId.toString(),
      userId: userId.toString(),
      message,
    };

    let job;
    const now = new Date();
    if (scheduledTime < now) {
      // N·∫øu th·ªùi gian ƒë√£ qua, ch·∫°y ngay l·∫≠p t·ª©c
      console.log(`‚è∞ Th·ªùi gian ${scheduledTime} ƒë√£ qua, ch·∫°y job ngay l·∫≠p t·ª©c cho User ${userId}`);
      job = await agenda.now("sendReminder", jobData);
    } else {
      job = await agenda.schedule(scheduledTime, "sendReminder", jobData);
      console.log(`‚úÖ ƒê√£ l√™n l·ªãch job send reminder v√†o ${scheduledTime} cho User ${userId}`);
    }

    return job;
  } catch (error) {
    console.error("‚ùå L·ªói khi l√™n l·ªãch send reminder:", error);
    throw error;
  }
};

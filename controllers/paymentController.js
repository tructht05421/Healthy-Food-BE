const querystring = require("querystring");
const crypto = require("crypto");
const moment = require("moment");
const VNPAY_CONFIG = require("../config/vnpay");
const Payment = require("../models/Payment");
const { MealPlan, UserMealPlan, MealDay, Meal, MealTracking } = require("../models/MealPlan");
const Reminder = require("../models/Reminder");
const { agenda } = require("../config/agenda");

exports.createPaymentUrl = async (req, res) => {
  try {
    const { userId, mealPlanId, amount } = req.body;

    if (!userId || !mealPlanId || !amount) {
      return res
        .status(400)
        .json({ status: "error", message: "Thi·∫øu userId, mealPlanId ho·∫∑c amount" });
    }

    if (isNaN(amount) || amount <= 0) {
      return res.status(400).json({ status: "error", message: "Amount ph·∫£i l√† s·ªë d∆∞∆°ng" });
    }

    // Ki·ªÉm tra MealPlan c√≥ t·ªìn t·∫°i kh√¥ng
    const mealPlan = await MealPlan.findById(mealPlanId);
    if (!mealPlan) {
      return res.status(400).json({ status: "error", message: "MealPlan kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra n·∫øu MealPlan ƒë√£ thanh to√°n th√†nh c√¥ng
    const successPayment = await Payment.findOne({ mealPlanId, status: "success" });
    if (successPayment) {
      return res.status(400).json({ status: "error", message: "MealPlan n√†y ƒë√£ ƒë∆∞·ª£c thanh to√°n" });
    }

    // T√¨m payment ƒëang pending cho mealPlanId v√† userId n√†y
    let payment = await Payment.findOne({
      mealPlanId,
      userId,
      status: "pending",
      createdAt: { $gt: new Date(Date.now() - 24 * 60 * 60 * 1000) }, // Trong v√≤ng 24 gi·ªù
    });

    // N·∫øu c√≥ payment pending g·∫ßn ƒë√¢y, s·ª≠ d·ª•ng l·∫°i thay v√¨ t·∫°o m·ªõi
    if (!payment) {
      // Kh√¥ng t√¨m th·∫•y ho·∫∑c payment c≈© qu√° 24h, t·∫°o m·ªõi
      payment = new Payment({
        userId,
        mealPlanId,
        amount,
        status: "pending",
        paymentMethod: "vnpay",
      });
      await payment.save();
    } else {
      // C·∫≠p nh·∫≠t th·ªùi gian v√† th√¥ng tin n·∫øu c·∫ßn
      payment.updatedAt = new Date();
      // C·∫≠p nh·∫≠t amount n·∫øu c√≥ thay ƒë·ªïi
      if (payment.amount !== amount) {
        payment.amount = amount;
        await payment.save();
      }
    }

    const clientIp =
      req.headers["x-forwarded-for"] || req.connection.remoteAddress || req.ip || "127.0.0.1";

    let vnp_Params = {
      vnp_Version: "2.1.0",
      vnp_Command: "pay",
      vnp_TmnCode: VNPAY_CONFIG.vnp_TmnCode || "",
      vnp_Amount: Math.round(amount * 100).toString(), // Quy ƒë·ªïi v·ªÅ ƒë∆°n v·ªã VNƒê
      vnp_CurrCode: "VND",
      vnp_TxnRef: payment._id.toString(),
      vnp_OrderInfo: `Thanh to√°n MealPlan: ${mealPlanId}`,
      vnp_OrderType: "180000",
      vnp_Locale: "vn",
      vnp_ReturnUrl: VNPAY_CONFIG.vnp_ReturnUrl || "",
      vnp_IpAddr: clientIp,
      vnp_CreateDate: moment().format("YYYYMMDDHHmmss"),
    };

    // ‚úÖ Log d·ªØ li·ªáu tr∆∞·ªõc khi k√Ω
    console.log("VNPay Params:", vnp_Params);

    // ‚úÖ Ki·ªÉm tra gi√° tr·ªã n√†o b·ªã `undefined`
    Object.entries(vnp_Params).forEach(([key, value]) => {
      if (value === undefined) {
        console.warn(`‚ö†Ô∏è C·∫£nh b√°o: Tham s·ªë ${key} b·ªã undefined!`);
      }
    });

    // ‚úÖ √âp ki·ªÉu t·∫•t c·∫£ gi√° tr·ªã th√†nh string ƒë·ªÉ tr√°nh l·ªói `.trim()`
    const sortedParams = Object.fromEntries(
      Object.entries(vnp_Params)
        .map(([key, value]) => [key, String(value || "").trim()])
        .sort()
    );

    console.log("üîπ Tham s·ªë sau khi s·∫Øp x·∫øp:", sortedParams);

    // ‚úÖ T·∫°o chu·ªói signData ƒë√∫ng chu·∫©n
    const signData = new URLSearchParams(sortedParams).toString();

    console.log("üîπ Chu·ªói signData tr∆∞·ªõc khi k√Ω:", signData);

    // ‚úÖ Ki·ªÉm tra gi√° tr·ªã HashSecret
    if (!VNPAY_CONFIG.vnp_HashSecret) {
      throw new Error("vnp_HashSecret kh√¥ng t·ªìn t·∫°i ho·∫∑c r·ªóng!");
    }

    // ‚úÖ T·∫°o HMAC SHA512
    const secureHash = crypto
      .createHmac("sha512", VNPAY_CONFIG.vnp_HashSecret)
      .update(Buffer.from(signData, "utf-8"))
      .digest("hex");

    console.log("üîπ Ch·ªØ k√Ω t·∫°o ra:", secureHash);

    sortedParams["vnp_SecureHash"] = secureHash;

    // ‚úÖ T·∫°o URL thanh to√°n
    const paymentUrl = `${VNPAY_CONFIG.vnp_Url}?${new URLSearchParams(sortedParams).toString()}`;

    console.log("üîπ URL thanh to√°n g·ª≠i ƒëi:", paymentUrl);

    return res.json({ status: "success", paymentUrl, paymentId: payment._id });
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o URL thanh to√°n:", error);
    return res.status(500).json({ status: "error", message: "L·ªói t·∫°o URL thanh to√°n" });
  }
};

exports.vnpayReturn = async (req, res) => {
  try {
    const vnp_Params = { ...req.query };
    const secureHash = vnp_Params["vnp_SecureHash"];
    delete vnp_Params["vnp_SecureHash"];
    delete vnp_Params["vnp_SecureHashType"];

    // ‚úÖ √âp ki·ªÉu t·∫•t c·∫£ gi√° tr·ªã th√†nh string v√† trim()
    const sortedParams = Object.fromEntries(
      Object.entries(vnp_Params)
        .map(([key, value]) => [key, String(value || "").trim()])
        .sort()
    );

    console.log("üîπ Tham s·ªë sau khi s·∫Øp x·∫øp:", sortedParams);

    // ‚úÖ T·∫°o chu·ªói signData ƒë√∫ng chu·∫©n
    const signData = new URLSearchParams(sortedParams).toString();

    console.log("üîπ Chu·ªói signData tr∆∞·ªõc khi k√Ω:", signData);

    // ‚úÖ Ki·ªÉm tra gi√° tr·ªã HashSecret
    if (!VNPAY_CONFIG.vnp_HashSecret) {
      throw new Error("vnp_HashSecret kh√¥ng t·ªìn t·∫°i ho·∫∑c r·ªóng!");
    }

    // ‚úÖ T·∫°o HMAC SHA512
    const signed = crypto
      .createHmac("sha512", VNPAY_CONFIG.vnp_HashSecret)
      .update(Buffer.from(signData, "utf-8"))
      .digest("hex");

    console.log("Secure Hash t·ª´ VNPay:", secureHash);
    console.log("Secure Hash t·ª± k√Ω l·∫°i:", signed);

    if (secureHash !== signed) {
      return res.status(400).json({ status: "error", message: "Invalid signature" });
    }

    // üîπ X·ª≠ l√Ω logic sau khi ki·ªÉm tra ch·ªØ k√Ω th√†nh c√¥ng
    const transactionNo = vnp_Params["vnp_TransactionNo"];
    const paymentId = vnp_Params["vnp_TxnRef"];
    const responseCode = vnp_Params["vnp_ResponseCode"];
    const status = responseCode === "00" ? "success" : "failed";

    // T√¨m payment hi·ªán t·∫°i
    const payment = await Payment.findByIdAndUpdate(
      paymentId,
      { transactionNo, status, paymentDate: new Date(), paymentDetails: vnp_Params },
      { new: true }
    );

    if (!payment) {
      return res.status(404).json({ status: "error", message: "Payment not found" });
    }

    // N·∫øu thanh to√°n th√†nh c√¥ng
    if (status === "success") {
      await MealPlan.findByIdAndUpdate(payment.mealPlanId, { isBlock: false });

      // üîπ T√¨m MealPlan tr∆∞·ªõc ƒë√≥ c·ªßa user (n·∫øu c√≥)
      const oldUserMealPlan = await UserMealPlan.findOne({ userId: payment.userId });

      if (oldUserMealPlan) {
        console.log(`üóë X√≥a d·ªØ li·ªáu MealPlan c≈© c·ªßa user: ${payment.userId}`);

        const oldMealPlanId = oldUserMealPlan.mealPlanId;

        // üîπ L·∫•y danh s√°ch MealDay tr∆∞·ªõc khi x√≥a
        const mealDays = await MealDay.find({ mealPlanId: oldMealPlanId });
        const mealDayIds = mealDays.map((mealDay) => mealDay._id);

        // üîπ L·∫•y danh s√°ch Reminder tr∆∞·ªõc khi x√≥a
        const reminders = await Reminder.find({ mealPlanId: oldMealPlanId });
        const reminderIds = reminders.map((reminder) => reminder._id);

        // üî• X√≥a Job theo reminderId (Agenda)
        if (reminderIds.length > 0) {
          await agenda.cancel({ "data.reminderId": { $in: reminderIds } });
        }

        // üî• X√≥a Meals tr∆∞·ªõc (v√¨ Meals ph·ª• thu·ªôc v√†o MealDay)
        if (mealDayIds.length > 0) {
          await Meal.deleteMany({ mealDayId: { $in: mealDayIds } });
        }

        // üî• X√≥a MealPlanTracking, Reminder, MealDay
        await MealTracking.deleteMany({ mealPlanId: oldMealPlanId });
        await Reminder.deleteMany({ mealPlanId: oldMealPlanId });
        await MealDay.deleteMany({ mealPlanId: oldMealPlanId });

        // üî• X√≥a MealPlan c≈© kh·ªèi user
        await UserMealPlan.deleteOne({ userId: payment.userId });
        // X√≥a lu√¥n Meal Plan c≈©
        await MealPlan.deleteOne({ _id: oldMealPlanId });
      }

      // üîπ G√°n MealPlan m·ªõi cho user
      await UserMealPlan.create({
        userId: payment.userId,
        mealPlanId: payment.mealPlanId,
        startedAt: new Date(),
      });

      console.log(`‚úÖ User ${payment.userId} ƒë√£ ƒë·ªïi sang MealPlan m·ªõi: ${payment.mealPlanId}`);

      // D·ªçn d·∫πp Payment pending kh√°c
      try {
        const cleanupResult = await Payment.deleteMany({
          _id: { $ne: payment._id },
          mealPlanId: payment.mealPlanId,
          status: "pending",
        });

        if (cleanupResult.deletedCount > 0) {
          console.log(
            `üßπ ƒê√£ x√≥a ${cleanupResult.deletedCount} payment pending th·ª´a cho mealPlan ${payment.mealPlanId}`
          );
        }
      } catch (cleanupError) {
        console.error("‚ùå L·ªói khi d·ªçn d·∫πp payment pending:", cleanupError);
      }
    }

    res.json({
      status,
      message: status === "success" ? "Thanh to√°n th√†nh c√¥ng!" : "Thanh to√°n th·∫•t b·∫°i!",
    });
  } catch (error) {
    console.error("‚ùå L·ªói x·ª≠ l√Ω VNPay:", error);
    res.status(500).json({ status: "error", message: "L·ªói x·ª≠ l√Ω ph·∫£n h·ªìi VNPAY" });
  }
};

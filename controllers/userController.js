const userService = require("../services/userService");
const catchAsync = require("../utils/catchAsync");

// üìå L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (b·ªè qua user ƒë√£ x√≥a)
exports.getAllUsers = catchAsync(async (req, res, next) => {
  const result = await userService.getAllUsers(req.query, req.user?._id);
  res.status(200).json(result);
});

// üìå L·∫•y th√¥ng tin chi ti·∫øt m·ªôt ng∆∞·ªùi d√πng theo ID (b·ªè qua user ƒë√£ x√≥a)
exports.getUserById = catchAsync(async (req, res, next) => {
  const result = await userService.getUserById(req.params.id);
  if (!result.success) {
    return next(result.error); // Tr·∫£ v·ªÅ l·ªói 404 n·∫øu kh√¥ng t√¨m th·∫•y
  }
  res.status(200).json(result);
});

// üìå T√¨m ki·∫øm ng∆∞·ªùi d√πng theo email
exports.searchUserByEmail = catchAsync(async (req, res, next) => {
  const result = await userService.searchUserByEmail(req.query);
  if (!result.success) {
    return next(result.error); // Tr·∫£ v·ªÅ l·ªói 400 n·∫øu thi·∫øu email
  }
  res.status(200).json(result);
});

// üìå C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng theo ID
exports.updateUserById = catchAsync(async (req, res, next) => {
  const result = await userService.updateUserById(req.params.id, req.body);
  if (!result.success) {
    return next(result.error); // Tr·∫£ v·ªÅ l·ªói 404 n·∫øu kh√¥ng t√¨m th·∫•y
  }
  res.status(200).json(result);
});

// üìå X√≥a ng∆∞·ªùi d√πng (Soft Delete)
exports.deleteUser = catchAsync(async (req, res, next) => {
  const { id } = req.params;
  const { password } = req.body; // L·∫•y m·∫≠t kh·∫©u t·ª´ body

  if (!password) {
    return next(new AppError("Password is required", 400));
  }

  const result = await userService.deleteUser(id, password);
  if (!result.success) {
    return next(result.error); // Tr·∫£ v·ªÅ l·ªói 404 ho·∫∑c 401 n·∫øu kh√¥ng t√¨m th·∫•y ho·∫∑c m·∫≠t kh·∫©u sai
  }

  res.status(200).json(result);
});

// üìå Kh√¥i ph·ª•c ng∆∞·ªùi d√πng (Ch·ªâ admin)
exports.restoreUser = catchAsync(async (req, res, next) => {
  const result = await userService.restoreUser(req.params.id);
  if (!result.success) {
    return next(result.error); // Tr·∫£ v·ªÅ l·ªói 404 n·∫øu kh√¥ng t√¨m th·∫•y
  }
  res.status(200).json(result);
});

// üìå T·∫°o m·ªõi ng∆∞·ªùi d√πng
exports.createUser = catchAsync(async (req, res, next) => {
  const result = await userService.createUser(req.body);
  if (!result.success) {
    return next(result.error); // Tr·∫£ v·ªÅ l·ªói 409 n·∫øu email ƒë√£ t·ªìn t·∫°i
  }
  res.status(201).json(result);
});

// üìå N·ªôp CV ƒë·ªÉ tr·ªü th√†nh Nutritionist
exports.submitNutritionistApplication = catchAsync(async (req, res, next) => {
  if (!req.user || !req.user._id) {
    return next(new AppError("Unauthorized: No user found in request", 401));
  }
  const result = await userService.submitNutritionistApplication(
    req.user._id,
    req.body
  );
  if (!result.success) {
    return next(result.error); // Tr·∫£ v·ªÅ l·ªói 400 ho·∫∑c 404 n·∫øu c√≥ v·∫•n ƒë·ªÅ
  }
  res.status(200).json(result);
});

// üìå L·∫•y danh s√°ch user ch·ªù ph√™ duy·ªát Nutritionist
exports.getPendingNutritionists = catchAsync(async (req, res, next) => {
  const result = await userService.getPendingNutritionists();
  res.status(200).json(result);
});

// üìå Ph√™ duy·ªát ho·∫∑c t·ª´ ch·ªëi Nutritionist
exports.reviewNutritionistApplication = catchAsync(async (req, res, next) => {
  const result = await userService.reviewNutritionistApplication(req.body);
  if (!result.success) {
    return next(result.error); // Tr·∫£ v·ªÅ l·ªói 400 ho·∫∑c 404 n·∫øu c√≥ v·∫•n ƒë·ªÅ
  }
  res.status(200).json(result);
});

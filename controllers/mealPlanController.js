const { MealPlan, MealDay, Meal, MealTracking, UserMealPlan } = require("../models/MealPlan");
const mongoose = require("mongoose");
const Reminder = require("../models/Reminder");
const { agenda } = require("../config/agenda");

// CRUD MealPlan operations
exports.createMealPlan = async (req, res) => {
  try {
    const { title, userId, type, duration, startDate, createdBy, meals, price } = req.body;

    if (type === "fixed" && (!meals || !Array.isArray(meals) || meals.length === 0)) {
      return res.status(400).json({ success: false, message: "Danh s√°ch b·ªØa ƒÉn kh√¥ng h·ª£p l·ªá" });
    }

    // X√°c ƒë·ªãnh ng√†y k·∫øt th√∫c
    const endDate = new Date(startDate);
    endDate.setDate(endDate.getDate() + duration - 1);

    // Ki·ªÉm tra xem MealPlan c√≥ b·ªã kh√≥a kh√¥ng (n·∫øu nutritionist t·∫°o)
    const isNutritionistCreated = createdBy.toString() !== userId.toString();
    const isBlock = isNutritionistCreated;

    // N·∫øu nutritionist t·∫°o, ph·∫£i c√≥ gi√°
    const mealPlanPrice = isNutritionistCreated ? price || 0 : 0;

    // ü•ó **T·∫°o MealPlan**
    const mealPlan = await MealPlan.create({
      title,
      userId,
      type,
      duration,
      startDate,
      endDate,
      createdBy,
      isBlock,
      price: mealPlanPrice,
      isPaid: !isNutritionistCreated, // N·∫øu user t·ª± t·∫°o, m·∫∑c ƒë·ªãnh l√† ƒë√£ thanh to√°n (mi·ªÖn ph√≠)
    });

    // üìù **C·∫≠p nh·∫≠t UserMealPlan**
    if (!isNutritionistCreated) {
      await UserMealPlan.findOneAndUpdate(
        { userId },
        { mealPlanId: mealPlan._id, startDate },
        { upsert: true, new: true }
      );
    }

    // ‚úÖ **X·ª≠ l√Ω t·∫°o MealDay**
    for (let i = 0; i < duration; i++) {
      const mealDayDate = new Date(startDate);
      mealDayDate.setDate(mealDayDate.getDate() + i);

      // T·∫°o MealDay (ch∆∞a c√≥ Meal)
      const mealDay = await MealDay.create({
        mealPlanId: mealPlan._id,
        date: mealDayDate.toISOString().split("T")[0], // L∆∞u YYYY-MM-DD
      });

      // N·∫øu type === "fixed" th√¨ t·∫°o lu√¥n Meal
      if (type === "fixed" && meals) {
        const mealPromises = meals.map(async (meal) => {
          return await Meal.create({
            mealDayId: mealDay._id,
            mealTime: meal.mealTime, // V√≠ d·ª•: "07:00"
            mealName: meal.mealName, // V√≠ d·ª•: "Breakfast"
          });
        });

        await Promise.all(mealPromises);
      }
    }

    res.status(201).json({ success: true, data: mealPlan });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

// ‚úÖ L·∫•y danh s√°ch MealPlan d·ª±a tr√™n userId t·ª´ token middleware
exports.getMealPlan = async (req, res) => {
  try {
    const { _id, role } = req.user; // L·∫•y t·ª´ middleware authentication
    let filter = {};
    if (role === "user") {
      filter.userId = _id; // User ch·ªâ th·∫•y MealPlan c·ªßa ch√≠nh m√¨nh
    } else if (role === "nutritionist") {
      filter.$or = [{ createdBy: _id }, { userId: _id }]; // Nutritionist th·∫•y MealPlan h·ªç t·∫°o ho·∫∑c c·ªßa user h·ªç t∆∞ v·∫•n
    } else {
      return res.status(403).json({ success: false, message: "Vai tr√≤ kh√¥ng h·ª£p l·ªá" });
    }

    const mealPlans = await MealPlan.find(filter).lean();
    res.status(200).json({ success: true, data: mealPlans });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};
// C·∫≠p nh·∫≠t l·∫°i h√†m updateMealPlan ƒë·ªÉ x·ª≠ l√Ω ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng h·ª£p
exports.updateMealPlan = async (req, res) => {
  try {
    const { mealPlanId } = req.params;
    const { isPause, isDelete, price, isBlock } = req.body;
    const { _id: userId, role } = req.user;

    // üîç T√¨m MealPlan
    const mealPlan = await MealPlan.findById(mealPlanId);
    if (!mealPlan) {
      return res.status(404).json({ success: false, message: "MealPlan kh√¥ng t·ªìn t·∫°i" });
    }

    // ‚úÖ Ki·ªÉm tra quy·ªÅn c·∫≠p nh·∫≠t (ch·ªâ owner ho·∫∑c nutritionist t·∫°o ra m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t)
    const isOwner = mealPlan.userId.toString() === userId.toString();
    const isCreator = mealPlan.createdBy.toString() === userId.toString();
    const isNutritionist = role === "nutritionist";

    if (!isOwner && !isCreator && !isNutritionist) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t MealPlan n√†y",
      });
    }

    // üîÑ X·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫°m d·ª´ng (isPause)
    if (typeof isPause !== "undefined" && mealPlan.isPause !== isPause) {
      mealPlan.isPause = isPause;
      await updateRemindersForMealPlan(mealPlanId, isPause); // T·∫°m d·ª´ng ho·∫∑c k√≠ch ho·∫°t l·∫°i nh·∫Øc nh·ªü
    }

    // üö® X·ª≠ l√Ω x√≥a MealPlan (isDelete)
    if (isDelete === true) {
      mealPlan.isDelete = true;

      // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan (Reminder, Tracking, Jobs,...)
      await deleteMealPlanData(mealPlanId);

      return res.status(200).json({
        success: true,
        message: "MealPlan v√† t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng",
        data: { _id: mealPlanId },
      });
    }

    // üë®‚Äç‚öïÔ∏è Nutritionist ho·∫∑c ng∆∞·ªùi t·∫°o MealPlan ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒë·∫∑c bi·ªát
    if (isNutritionist || isCreator) {
      if (typeof price !== "undefined") {
        mealPlan.price = price;
      }

      // üîí X·ª≠ l√Ω tr·∫°ng th√°i kh√≥a MealPlan (isBlock)
      if (typeof isBlock !== "undefined" && mealPlan.isBlock !== isBlock) {
        mealPlan.isBlock = isBlock;

        // N·∫øu m·ªü kh√≥a MealPlan, c·∫≠p nh·∫≠t l·∫°i Reminder n·∫øu c·∫ßn
        if (!isBlock) {
          await updateRemindersForMealPlan(mealPlanId, mealPlan.isPause);
        }
        // N·∫øu kh√≥a MealPlan, t·∫°m d·ª´ng t·∫•t c·∫£ Reminder
        else {
          await updateRemindersForMealPlan(mealPlanId, true);
        }
      }
    }

    await mealPlan.save();
    res.status(200).json({ success: true, data: mealPlan });
  } catch (error) {
    console.error("üî• L·ªói khi c·∫≠p nh·∫≠t MealPlan:", error);
    res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß" });
  }
};
exports.deleteMealPlan = async (req, res) => {
  try {
    const { mealPlanId } = req.params;
    const { _id: userId } = req.user;

    // üîπ T√¨m MealPlan
    const mealPlan = await MealPlan.findById(mealPlanId);
    if (!mealPlan) {
      return res.status(404).json({ success: false, message: "MealPlan kh√¥ng t·ªìn t·∫°i" });
    }

    // üîπ Ki·ªÉm tra quy·ªÅn
    if (
      mealPlan.userId.toString() !== userId.toString() &&
      mealPlan.createdBy.toString() !== userId.toString()
    ) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a MealPlan n√†y",
      });
    }

    // üî• **X√≥a t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan**
    await deleteMealPlanData(mealPlanId);

    // üî• **X√≥a MealPlan**
    await MealPlan.findByIdAndDelete(mealPlanId);

    // üîÑ **C·∫≠p nh·∫≠t UserMealPlan v·ªÅ `null` n·∫øu ƒëang theo d√µi MealPlan n√†y**
    await UserMealPlan.findOneAndUpdate(
      { userId, mealPlanId },
      { mealPlanId: null },
      { new: true }
    );

    res.status(200).json({
      success: true,
      message: "MealPlan v√† t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng",
      data: { _id: mealPlanId },
    });
  } catch (error) {
    console.error("üî• L·ªói khi x√≥a MealPlan:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};
// H√†m ri√™ng ƒë·ªÉ pause/resume MealPlan
exports.toggleMealPlanStatus = async (req, res) => {
  try {
    const { mealPlanId } = req.params;
    const { isPause } = req.body;
    const { _id: userId } = req.user;

    if (typeof isPause !== "boolean") {
      return res.status(400).json({
        success: false,
        message: "Tr·∫°ng th√°i isPause ph·∫£i l√† true ho·∫∑c false",
      });
    }

    // T√¨m MealPlan
    const mealPlan = await MealPlan.findById(mealPlanId);
    if (!mealPlan) {
      return res.status(404).json({ success: false, message: "MealPlan kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra quy·ªÅn
    if (
      mealPlan.userId.toString() !== userId.toString() &&
      mealPlan.createdBy.toString() !== userId.toString()
    ) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t MealPlan n√†y",
      });
    }

    // N·∫øu MealPlan ƒë√£ b·ªã kh√≥a v√† ng∆∞·ªùi d√πng kh√¥ng ph·∫£i l√† nutritionist
    if (mealPlan.isBlock && mealPlan.createdBy.toString() !== userId.toString()) {
      return res.status(403).json({
        success: false,
        message: "MealPlan ƒëang b·ªã kh√≥a, b·∫°n kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i",
      });
    }

    // Kh√¥ng c·∫ßn c·∫≠p nh·∫≠t n·∫øu tr·∫°ng th√°i kh√¥ng thay ƒë·ªïi
    if (mealPlan.isPause === isPause) {
      return res.status(200).json({
        success: true,
        message: `MealPlan ƒë√£ ·ªü tr·∫°ng th√°i ${isPause ? "t·∫°m d·ª´ng" : "ho·∫°t ƒë·ªông"}`,
        data: mealPlan,
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    mealPlan.isPause = isPause;
    await mealPlan.save();

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa t·∫•t c·∫£ reminder v√† job li√™n quan
    await updateRemindersForMealPlan(mealPlanId, isPause);

    res.status(200).json({
      success: true,
      message: `MealPlan ƒë√£ ƒë∆∞·ª£c ${isPause ? "t·∫°m d·ª´ng" : "ti·∫øp t·ª•c"} th√†nh c√¥ng`,
      data: mealPlan,
    });
  } catch (error) {
    console.error("üî• L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i MealPlan:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};
// Utility functions Helper Lean
// H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫•t c·∫£ reminder li√™n quan ƒë·∫øn m·ªôt MealPlan
const updateRemindersForMealPlan = async (mealPlanId, isPaused) => {
  try {
    console.log(
      `${isPaused ? "‚è∏Ô∏è T·∫°m d·ª´ng" : "‚ñ∂Ô∏è K√≠ch ho·∫°t"} reminders cho MealPlan ${mealPlanId}`
    );

    // T√¨m t·∫•t c·∫£ reminder li√™n quan ƒë·∫øn MealPlan
    const reminders = await Reminder.find({ mealPlanId });
    console.log(`üîç T√¨m th·∫•y ${reminders.length} reminder cho MealPlan n√†y`);

    // L·∫∑p qua t·ª´ng reminder ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i
    for (const reminder of reminders) {
      reminder.isActive = !isPaused;

      if (isPaused) {
        // T·∫°m d·ª´ng t·∫•t c·∫£ job li√™n quan ƒë·∫øn reminderId
        console.log(`‚è∏Ô∏è T·∫°m d·ª´ng t·∫•t c·∫£ job cho reminder ${reminder._id}`);
        await agenda.cancel({ "data.reminderId": reminder._id });

        reminder.status = "paused";
      } else {
        // K√≠ch ho·∫°t l·∫°i job
        if (reminder.remindTime && new Date(reminder.remindTime) > new Date()) {
          console.log(`‚ñ∂Ô∏è K√≠ch ho·∫°t l·∫°i reminder ${reminder._id} v√†o ${reminder.remindTime}`);

          // H·ªßy job c≈© (n·∫øu c√≤n s√≥t)
          await agenda.cancel({ "data.reminderId": reminder._id });

          // T·∫°o job m·ªõi
          const job = await agenda.schedule(reminder.remindTime, "sendReminder", {
            reminderId: reminder._id,
            userId: reminder.userId,
            message: reminder.message,
          });

          reminder.jobId = job.attrs._id;
          reminder.status = "scheduled";
        } else {
          reminder.status = "expired";
        }
      }

      await reminder.save();
    }

    console.log(`‚úÖ Ho√†n t·∫•t c·∫≠p nh·∫≠t ${reminders.length} reminder cho MealPlan ${mealPlanId}`);
    return true;
  } catch (error) {
    console.error("üî• L·ªói khi c·∫≠p nh·∫≠t reminder:", error);
    throw error;
  }
};

// H√†m x√≥a t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan ƒë·∫øn m·ªôt MealPlan
const deleteMealPlanData = async (mealPlanId) => {
  try {
    console.log(`üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a d·ªØ li·ªáu li√™n quan ƒë·∫øn MealPlan ${mealPlanId}`);

    // üîπ L·∫•y danh s√°ch MealDay tr∆∞·ªõc khi x√≥a
    const mealDays = await MealDay.find({ mealPlanId });
    const mealDayIds = mealDays.map((day) => day._id);

    // üîπ L·∫•y danh s√°ch Meal tr∆∞·ªõc khi x√≥a
    const meals = await Meal.find({ mealDayId: { $in: mealDayIds } });
    const mealIds = meals.map((meal) => meal._id);

    // üîπ L·∫•y danh s√°ch Reminder tr∆∞·ªõc khi x√≥a ƒë·ªÉ h·ªßy Job
    const reminders = await Reminder.find({ mealPlanId });
    const reminderIds = reminders.map((reminder) => reminder._id);

    // üî• H·ªßy t·∫•t c·∫£ job li√™n quan trong Agenda
    if (reminderIds.length > 0) {
      console.log(`üóëÔ∏è H·ªßy ${reminderIds.length} job nh·∫Øc nh·ªü`);
      await agenda.cancel({ "data.reminderId": { $in: reminderIds } });
    }

    // üî• X√≥a t·∫•t c·∫£ d·ªØ li·ªáu theo th·ª© t·ª± (t·ª´ con ƒë·∫øn cha)
    const deletionResults = await Promise.all([
      Reminder.deleteMany({ mealPlanId }),
      MealTracking.deleteMany({ mealPlanId }),
      Meal.deleteMany({ mealDayId: { $in: mealDayIds } }),
      MealDay.deleteMany({ mealPlanId }),
    ]);

    console.log(`‚úÖ ƒê√£ x√≥a:
      - ${deletionResults[0].deletedCount} Reminder
      - ${deletionResults[1].deletedCount} MealTracking
      - ${deletionResults[2].deletedCount} Meal
      - ${deletionResults[3].deletedCount} MealDay
    `);

    return true;
  } catch (error) {
    console.error("üî• L·ªói khi x√≥a d·ªØ li·ªáu MealPlan:", error);
    throw error;
  }
};

// H√†m l·∫•y th√¥ng tin c√°i reminder v√† job cho MealPlan (ƒë·ªÉ debug)
exports.getMealPlanReminders = async (req, res) => {
  try {
    const { mealPlanId } = req.params;
    const { _id: userId } = req.user;

    // T√¨m MealPlan
    const mealPlan = await MealPlan.findById(mealPlanId);
    if (!mealPlan) {
      return res.status(404).json({ success: false, message: "MealPlan kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra quy·ªÅn
    if (
      mealPlan.userId.toString() !== userId.toString() &&
      mealPlan.createdBy.toString() !== userId.toString()
    ) {
      return res.status(403).json({
        success: false,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin n√†y",
      });
    }

    // T√¨m t·∫•t c·∫£ reminder li√™n quan
    const reminders = await Reminder.find({ mealPlanId }).sort({ remindTime: 1 });

    // T·∫°o response chi ti·∫øt
    const reminderDetails = await Promise.all(
      reminders.map(async (reminder) => {
        let jobStatus = "Kh√¥ng c√≥ job";
        let nextRunAt = null;

        if (reminder.jobId) {
          // Ki·ªÉm tra job c√≥ t·ªìn t·∫°i kh√¥ng
          const job = await agenda.jobs({ _id: reminder.jobId });
          if (job && job.length > 0) {
            jobStatus = job[0].attrs.nextRunAt ? "ƒêang l√™n l·ªãch" : "ƒê√£ h·ªßy";
            nextRunAt = job[0].attrs.nextRunAt;
          } else {
            jobStatus = "Job kh√¥ng t·ªìn t·∫°i";
          }
        }

        return {
          _id: reminder._id,
          mealId: reminder.mealId,
          message: reminder.message,
          remindTime: reminder.remindTime,
          isActive: reminder.isActive,
          status: reminder.status,
          jobId: reminder.jobId,
          jobStatus,
          nextRunAt,
        };
      })
    );

    res.status(200).json({
      success: true,
      data: {
        mealPlanStatus: {
          isPause: mealPlan.isPause,
          isBlock: mealPlan.isBlock,
          isDelete: mealPlan.isDelete,
        },
        reminders: reminderDetails,
      },
    });
  } catch (error) {
    console.error("üî• L·ªói khi l·∫•y th√¥ng tin reminder:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};

// CRUD Meal to Day operations
// Add meal to Day
exports.addMealToDay = async (req, res) => {
  try {
    const { mealPlanId, mealDayId } = req.params;
    const { userId, mealTime, mealName, dishes = [] } = req.body; // ‚úÖ L·∫•y userId t·ª´ body

    if (!userId) {
      return res.status(400).json({ success: false, message: "Thi·∫øu userId" });
    }

    // üîç Ki·ªÉm tra MealPlan t·ªìn t·∫°i & thu·ªôc v·ªÅ user
    const mealPlan = await MealPlan.findById(mealPlanId);
    if (!mealPlan) {
      return res.status(404).json({ success: false, message: "MealPlan kh√¥ng t·ªìn t·∫°i" });
    }
    if (
      mealPlan.userId.toString() !== userId.toString() &&
      mealPlan.createdBy.toString() !== userId.toString()
    ) {
      return res
        .status(403)
        .json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a MealPlan n√†y" });
    }
    if (mealPlan.isBlock) {
      return res
        .status(403)
        .json({ success: false, message: "MealPlan b·ªã kh√≥a, kh√¥ng th·ªÉ th√™m b·ªØa ƒÉn" });
    }

    // üîç Ki·ªÉm tra MealDay t·ªìn t·∫°i trong MealPlan
    const mealDay = await MealDay.findOne({
      _id: new mongoose.Types.ObjectId(mealDayId),
      mealPlanId: new mongoose.Types.ObjectId(mealPlanId),
    });
    if (!mealDay) {
      return res.status(404).json({ success: false, message: "Ng√†y ƒÉn kh√¥ng h·ª£p l·ªá" });
    }

    // ‚úÖ T·∫°o Meal m·ªõi
    const newMeal = await Meal.create({
      mealDayId,
      mealTime,
      mealName,
      dishes,
    });

    res.status(201).json({ success: true, data: newMeal });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};
// Get Meals By Day
exports.getMealsByDayId = async (req, res) => {
  try {
    const { mealPlanId, mealDayId } = req.params;
    const userId = req.user?.id; // L·∫•y userId t·ª´ middleware

    if (!userId) {
      return res.status(401).json({ success: false, message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    // Ki·ªÉm tra MealPlan t·ªìn t·∫°i & thu·ªôc v·ªÅ user
    const mealPlan = await MealPlan.findById(mealPlanId);
    if (!mealPlan) {
      return res.status(404).json({ success: false, message: "MealPlan kh√¥ng t·ªìn t·∫°i" });
    }
    if (
      mealPlan.userId.toString() !== userId.toString() &&
      mealPlan.createdBy.toString() !== userId.toString()
    ) {
      return res
        .status(403)
        .json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem MealPlan n√†y" });
    }

    // Ki·ªÉm tra MealDay t·ªìn t·∫°i
    const mealDay = await MealDay.findOne({ _id: mealDayId, mealPlanId });
    if (!mealDay) {
      return res.status(404).json({ success: false, message: "Ng√†y ƒÉn kh√¥ng h·ª£p l·ªá" });
    }

    // L·∫•y danh s√°ch b·ªØa ƒÉn
    const meals = await Meal.find({ mealDayId });

    res.status(200).json({ success: true, data: meals });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};
// Get Meal Details
exports.getMealById = async (req, res) => {
  try {
    const { mealPlanId, mealDayId, mealId } = req.params;
    const userId = req.user?.id; // L·∫•y userId t·ª´ middleware isAuthenticated
    console.log("USERID", userId);
    if (!userId) {
      return res.status(401).json({ success: false, message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    // Ki·ªÉm tra MealPlan t·ªìn t·∫°i & thu·ªôc v·ªÅ user
    const mealPlan = await MealPlan.findById(mealPlanId);
    if (!mealPlan) {
      return res.status(404).json({ success: false, message: "MealPlan kh√¥ng t·ªìn t·∫°i" });
    }
    if (
      mealPlan.userId.toString() !== userId.toString() &&
      mealPlan.createdBy.toString() !== userId.toString()
    ) {
      return res
        .status(403)
        .json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem MealPlan n√†y" });
    }

    // Ki·ªÉm tra MealDay t·ªìn t·∫°i
    const mealDay = await MealDay.findOne({ _id: mealDayId, mealPlanId });
    if (!mealDay) {
      return res.status(404).json({ success: false, message: "Ng√†y ƒÉn kh√¥ng h·ª£p l·ªá" });
    }

    // L·∫•y th√¥ng tin b·ªØa ƒÉn
    const meal = await Meal.findOne({ _id: mealId, mealDayId });
    if (!meal) {
      return res.status(404).json({ success: false, message: "B·ªØa ƒÉn kh√¥ng t·ªìn t·∫°i" });
    }

    res.status(200).json({ success: true, data: meal });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};
// Update Meal in Day
exports.updateMealInDay = async (req, res) => {
  try {
    const { mealPlanId, mealDayId, mealId } = req.params;
    const { userId, mealTime, mealName } = req.body;

    if (!userId) {
      return res.status(400).json({ success: false, message: "Thi·∫øu userId" });
    }

    // üîç Ki·ªÉm tra MealPlan t·ªìn t·∫°i & thu·ªôc v·ªÅ user
    const mealPlan = await MealPlan.findById(mealPlanId);
    if (!mealPlan) {
      return res.status(404).json({ success: false, message: "MealPlan kh√¥ng t·ªìn t·∫°i" });
    }
    if (
      mealPlan.userId.toString() !== userId.toString() &&
      mealPlan.createdBy.toString() !== userId.toString()
    ) {
      return res
        .status(403)
        .json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a MealPlan n√†y" });
    }
    if (mealPlan.isBlock) {
      return res
        .status(403)
        .json({ success: false, message: "MealPlan b·ªã kh√≥a, kh√¥ng th·ªÉ s·ª≠a b·ªØa ƒÉn" });
    }

    // üîç Ki·ªÉm tra Meal c√≥ t·ªìn t·∫°i kh√¥ng
    const meal = await Meal.findOne({ _id: mealId, mealDayId });
    if (!meal) {
      return res.status(404).json({ success: false, message: "B·ªØa ƒÉn kh√¥ng t·ªìn t·∫°i" });
    }

    // ‚úÖ C·∫≠p nh·∫≠t Meal
    meal.mealTime = mealTime || meal.mealTime;
    meal.mealName = mealName || meal.mealName;
    await meal.save();

    // ‚úÖ C·∫≠p nh·∫≠t Reminder v√† Job li√™n quan
    await Reminder.updateMany({ mealId }, { time: mealTime });
    await Job.updateMany({ mealId }, { time: mealTime });

    // ‚úÖ C·∫≠p nh·∫≠t MealTracking n·∫øu c√≥
    await MealTracking.updateMany({ mealId }, { mealTime });

    res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t b·ªØa ƒÉn th√†nh c√¥ng", data: meal });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};
// Delete Meal in Day
exports.deleteMealInDay = async (req, res) => {
  try {
    const { mealPlanId, mealDayId, mealId } = req.params;
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({ success: false, message: "Thi·∫øu userId" });
    }

    // üîç Ki·ªÉm tra MealPlan t·ªìn t·∫°i & thu·ªôc v·ªÅ user
    const mealPlan = await MealPlan.findById(mealPlanId);
    if (!mealPlan) {
      return res.status(404).json({ success: false, message: "MealPlan kh√¥ng t·ªìn t·∫°i" });
    }
    if (
      mealPlan.userId.toString() !== userId.toString() &&
      mealPlan.createdBy.toString() !== userId.toString()
    ) {
      return res
        .status(403)
        .json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a MealPlan n√†y" });
    }
    if (mealPlan.isBlock) {
      return res
        .status(403)
        .json({ success: false, message: "MealPlan b·ªã kh√≥a, kh√¥ng th·ªÉ x√≥a b·ªØa ƒÉn" });
    }

    // üîç Ki·ªÉm tra Meal t·ªìn t·∫°i
    const meal = await Meal.findOne({ _id: mealId, mealDayId });
    if (!meal) {
      return res.status(404).json({ success: false, message: "B·ªØa ƒÉn kh√¥ng t·ªìn t·∫°i" });
    }

    // ‚úÖ X√≥a Meal
    await Meal.deleteOne({ _id: mealId });

    // ‚úÖ X√≥a Reminder v√† Job li√™n quan
    await Reminder.deleteMany({ mealId });
    await Job.deleteMany({ mealId });

    // ‚úÖ X√≥a MealTracking li√™n quan
    await MealTracking.deleteMany({ mealId });

    res.status(200).json({ success: true, message: "X√≥a b·ªØa ƒÉn th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

// CRUD Dish to Meal
const moment = require("moment-timezone");
const handleReminderAndJob = async (userId, mealPlanId, mealDayId, mealId, meal, mealDay) => {
  // Kh√¥ng t·∫°o Reminder n·∫øu kh√¥ng c√≥ m√≥n ƒÉn
  if (!meal || !meal.dishes || meal.dishes.length === 0) {
    console.log(`üö® Kh√¥ng c√≥ m√≥n ƒÉn, x√≥a t·∫•t c·∫£ reminder c·ªßa meal ${mealId}`);

    // T√¨m v√† x√≥a t·∫•t c·∫£ Reminder c≈© n·∫øu c√≥
    const existingReminders = await Reminder.find({ userId, mealPlanId, mealDayId, mealId });

    for (const existingReminder of existingReminders) {
      if (existingReminder.jobId) {
        console.log(`üóëÔ∏è H·ªßy job c≈© ${existingReminder.jobId}`);
        await agenda.cancel({ _id: existingReminder.jobId });
      }
      console.log(`üóëÔ∏è X√≥a reminder c≈© ${existingReminder._id}`);
      await Reminder.deleteOne({ _id: existingReminder._id });
    }
    return null;
  }

  const remindTime = moment
    .tz(`${mealDay.date} ${meal.mealTime}`, "YYYY-MM-DD HH:mm", "Asia/Ho_Chi_Minh")
    .toDate();

  const dishNames = meal.dishes.map((dish) => dish.name).join(", ");
  const message = `üì¢ ƒê·∫øn gi·ªù ƒÉn ${meal.mealName}, b·∫°n c√≥: ${dishNames}!`;

  // T√¨m reminder hi·ªán t·∫°i cho mealId n√†y
  let existingReminders = await Reminder.find({ userId, mealPlanId, mealDayId, mealId });

  if (existingReminders.length > 1) {
    console.log(
      `‚ö†Ô∏è C√≥ ${existingReminders.length} reminder d∆∞ th·ª´a, gi·ªØ l·∫°i 1 v√† x√≥a ph·∫ßn c√≤n l·∫°i`
    );

    for (let i = 1; i < existingReminders.length; i++) {
      console.log(`üóëÔ∏è X√≥a reminder d∆∞ th·ª´a ${existingReminders[i]._id}`);
      await Reminder.deleteOne({ _id: existingReminders[i]._id });
    }

    // Ch·ªâ gi·ªØ l·∫°i reminder ƒë·∫ßu ti√™n
    existingReminders = [existingReminders[0]];
  }

  let reminder = existingReminders.length > 0 ? existingReminders[0] : null;

  if (reminder) {
    console.log(`‚ö†Ô∏è C·∫≠p nh·∫≠t Reminder hi·ªán c√≥: ${reminder._id}`);

    // C·∫≠p nh·∫≠t th√¥ng tin reminder
    reminder.remindTime = remindTime;
    reminder.message = message;
    reminder.status = "scheduled";

    await reminder.save();
  } else {
    console.log(`üìÜ T·∫°o m·ªõi Reminder v√†o: ${remindTime.toISOString()}`);

    reminder = new Reminder({
      userId,
      mealPlanId,
      mealDayId,
      mealId,
      message,
      remindTime,
      isActive: true,
      status: "scheduled",
      jobId: null,
    });

    await reminder.save();
  }

  // H·ªßy t·∫•t c·∫£ c√°c job c≈© li√™n quan ƒë·∫øn reminder n√†y
  const existingJobs = await agenda.jobs({
    "data.reminderId": reminder._id,
    nextRunAt: { $ne: null },
  });

  if (existingJobs.length > 0) {
    console.log(`‚ö†Ô∏è Ph√°t hi·ªán ${existingJobs.length} job d∆∞ th·ª´a cho reminder ${reminder._id}`);

    for (const job of existingJobs) {
      console.log(`üóëÔ∏è H·ªßy job c≈© ${job.attrs._id}`);
      await agenda.cancel({ _id: job.attrs._id });
    }
  }

  // T·∫°o Job m·ªõi
  const job = await agenda.schedule(remindTime, "sendReminder", {
    reminderId: reminder._id,
    userId,
    message,
  });

  // L∆∞u jobId v√†o Reminder
  reminder.jobId = job.attrs._id;
  await reminder.save();

  console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t reminder ${reminder._id} v·ªõi jobId ${reminder.jobId}`);
  return reminder;
};

// B·ªï sung th√™m h√†m d·ªçn d·∫πp
exports.cleanupRedundantJobs = async (req, res) => {
  try {
    const { userId } = req.params;

    // T√¨m t·∫•t c·∫£ reminder c·ªßa user
    const reminders = await Reminder.find({ userId });
    console.log(`üîç T√¨m th·∫•y ${reminders.length} reminder cho user ${userId}`);

    let redundantJobsCount = 0;

    // Duy·ªát qua t·ª´ng reminder
    for (const reminder of reminders) {
      // T√¨m t·∫•t c·∫£ job li√™n quan ƒë·∫øn reminder n√†y
      const jobs = await agenda.jobs({
        "data.reminderId": reminder._id,
        nextRunAt: { $ne: null },
      });

      // N·∫øu c√≥ nhi·ªÅu h∆°n 1 job, gi·ªØ l·∫°i job cu·ªëi c√πng v√† x√≥a c√°c job c√≤n l·∫°i
      if (jobs.length > 1) {
        console.log(`‚ö†Ô∏è Ph√°t hi·ªán ${jobs.length} job cho reminder ${reminder._id}`);

        // S·∫Øp x·∫øp job theo th·ªùi gian t·∫°o gi·∫£m d·∫ßn
        jobs.sort((a, b) => new Date(b.attrs.lastModifiedAt) - new Date(a.attrs.lastModifiedAt));

        // Gi·ªØ l·∫°i job ƒë·∫ßu ti√™n (m·ªõi nh·∫•t), x√≥a c√°c job c√≤n l·∫°i
        for (let i = 1; i < jobs.length; i++) {
          console.log(`üóëÔ∏è H·ªßy job d∆∞ th·ª´a ${jobs[i].attrs._id}`);
          await agenda.cancel({ _id: jobs[i].attrs._id });
          redundantJobsCount++;
        }

        // C·∫≠p nh·∫≠t jobId trong reminder n·∫øu c·∫ßn
        if (reminder.jobId.toString() !== jobs[0].attrs._id.toString()) {
          reminder.jobId = jobs[0].attrs._id;
          await reminder.save();
          console.log(`‚úÖ C·∫≠p nh·∫≠t reminder ${reminder._id} v·ªõi jobId m·ªõi ${reminder.jobId}`);
        }
      }
    }

    return res.status(200).json({
      success: true,
      message: `ƒê√£ d·ªçn d·∫πp ${redundantJobsCount} job d∆∞ th·ª´a`,
      data: { redundantJobsCount },
    });
  } catch (error) {
    console.error("üî• L·ªói khi d·ªçn d·∫πp job:", error);
    return res.status(500).json({ success: false, message: error.message });
  }
};
// Get Dish By Meal
exports.getDishesByMeal = async (req, res) => {
  try {
    const { mealPlanId, mealDayId, mealId } = req.params;
    const userId = req.user.id; // L·∫•y userId t·ª´ middleware x√°c th·ª±c

    // Ki·ªÉm tra MealPlan t·ªìn t·∫°i & thu·ªôc v·ªÅ user
    const mealPlan = await MealPlan.findById(mealPlanId);
    if (!mealPlan) {
      return res.status(404).json({ success: false, message: "MealPlan kh√¥ng t·ªìn t·∫°i" });
    }
    if (
      mealPlan.userId.toString() !== userId.toString() &&
      mealPlan.createdBy.toString() !== userId.toString()
    ) {
      return res
        .status(403)
        .json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem MealPlan n√†y" });
    }

    // Ki·ªÉm tra MealDay t·ªìn t·∫°i
    const mealDay = await MealDay.findOne({ _id: mealDayId, mealPlanId });
    if (!mealDay) {
      return res.status(404).json({ success: false, message: "Ng√†y ƒÉn kh√¥ng h·ª£p l·ªá" });
    }

    // L·∫•y th√¥ng tin b·ªØa ƒÉn & populate dishes
    const meal = await Meal.findOne({ _id: mealId, mealDayId }).populate("dishes.dishId");

    if (!meal) {
      return res.status(404).json({ success: false, message: "B·ªØa ƒÉn kh√¥ng t·ªìn t·∫°i" });
    }

    res.status(200).json({ success: true, data: meal.dishes });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
};

// ADD Dish to Meal
exports.addDishesToMeal = async (req, res) => {
  try {
    const { mealPlanId, mealDayId, mealId } = req.params;
    const { dishes, userId } = req.body;

    if (!userId) return res.status(400).json({ success: false, message: "Thi·∫øu userId" });
    if (!Array.isArray(dishes) || dishes.length === 0)
      return res.status(400).json({ success: false, message: "Danh s√°ch m√≥n ƒÉn kh√¥ng h·ª£p l·ªá" });

    // Ki·ªÉm tra MealPlan
    const mealPlan = await MealPlan.findById(mealPlanId);
    if (!mealPlan)
      return res.status(404).json({ success: false, message: "MealPlan kh√¥ng t·ªìn t·∫°i" });
    if (mealPlan.isBlock)
      return res
        .status(403)
        .json({ success: false, message: "MealPlan b·ªã kh√≥a, kh√¥ng th·ªÉ th√™m m√≥n ƒÉn" });
    if (
      mealPlan.userId.toString() !== userId.toString() &&
      mealPlan.createdBy.toString() !== userId.toString()
    ) {
      return res
        .status(403)
        .json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a MealPlan n√†y" });
    }

    // Ki·ªÉm tra MealDay v√† Meal
    const mealDay = await MealDay.findOne({ _id: mealDayId, mealPlanId });
    if (!mealDay) return res.status(404).json({ success: false, message: "Ng√†y ƒÉn kh√¥ng h·ª£p l·ªá" });

    const meal = await Meal.findOne({ _id: mealId, mealDayId });
    if (!meal) return res.status(404).json({ success: false, message: "B·ªØa ƒÉn kh√¥ng h·ª£p l·ªá" });

    // Th√™m m√≥n ƒÉn v√†o meal, tr√°nh tr√πng l·∫∑p
    const existingDishes = new Set(meal.dishes.map((dish) => JSON.stringify(dish)));
    dishes.forEach((dish) =>
      existingDishes.add(
        JSON.stringify({ dishId: dish.dishId, name: dish.name, calories: dish.calories })
      )
    );
    meal.dishes = Array.from(existingDishes).map((dish) => JSON.parse(dish));

    await meal.save();

    // Ch·ªâ t·∫°o MealTracking n·∫øu ch∆∞a c√≥
    let tracking = await MealTracking.findOne({ userId, mealPlanId, mealDayId, mealId });
    if (!tracking) {
      tracking = await MealTracking.create({
        userId,
        mealPlanId,
        mealDayId,
        mealId,
        isDone: false,
      });
    }

    // C·∫≠p nh·∫≠t Reminder v√† Job
    await handleReminderAndJob(userId, mealPlanId, mealDayId, mealId, meal, mealDay);

    res.status(200).json({ success: true, data: { meal, tracking } });
  } catch (error) {
    console.error("üî• L·ªói khi th√™m m√≥n v√†o Meal:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};

// DELETE Dish from Meal
exports.deleteDishFromMeal = async (req, res) => {
  try {
    const { mealPlanId, mealDayId, mealId, dishId } = req.params;
    const { userId } = req.body;

    if (!userId) return res.status(400).json({ success: false, message: "Thi·∫øu userId" });

    // Ki·ªÉm tra MealPlan
    const mealPlan = await MealPlan.findById(mealPlanId);
    if (!mealPlan)
      return res.status(404).json({ success: false, message: "MealPlan kh√¥ng t·ªìn t·∫°i" });
    if (mealPlan.isBlock)
      return res
        .status(403)
        .json({ success: false, message: "MealPlan b·ªã kh√≥a, kh√¥ng th·ªÉ x√≥a m√≥n ƒÉn" });
    if (
      mealPlan.userId.toString() !== userId.toString() &&
      mealPlan.createdBy.toString() !== userId.toString()
    ) {
      return res
        .status(403)
        .json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a MealPlan n√†y" });
    }

    // T√¨m MealDay v√† Meal
    const mealDay = await MealDay.findOne({ _id: mealDayId, mealPlanId });
    if (!mealDay) return res.status(404).json({ success: false, message: "Ng√†y ƒÉn kh√¥ng h·ª£p l·ªá" });

    const meal = await Meal.findOne({ _id: mealId, mealDayId });
    if (!meal) return res.status(404).json({ success: false, message: "B·ªØa ƒÉn kh√¥ng h·ª£p l·ªá" });

    // Ki·ªÉm tra xem m√≥n ƒÉn c√≥ t·ªìn t·∫°i kh√¥ng
    const dishIndex = meal.dishes.findIndex((dish) => dish.dishId.toString() === dishId);
    if (dishIndex === -1)
      return res.status(404).json({ success: false, message: "M√≥n ƒÉn kh√¥ng t·ªìn t·∫°i trong b·ªØa ƒÉn" });

    // X√≥a m√≥n ƒÉn kh·ªèi danh s√°ch
    meal.dishes.splice(dishIndex, 1);
    await meal.save();

    if (meal.dishes.length === 0) {
      // N·∫øu kh√¥ng c√≤n m√≥n ƒÉn, x√≥a Reminder v√† Job
      const reminder = await Reminder.findOne({ userId, mealPlanId, mealDayId, mealId });
      if (reminder) {
        await Reminder.deleteOne({ _id: reminder._id });
        await agenda.cancel({ "data.reminderId": reminder._id });
      }

      // N·∫øu MealTracking t·ªìn t·∫°i, x√≥a lu√¥n
      const tracking = await MealTracking.findOne({ userId, mealPlanId, mealDayId, mealId });
      if (tracking) {
        await MealTracking.deleteOne({ _id: tracking._id });
      }
    } else {
      // N·∫øu v·∫´n c√≤n m√≥n ƒÉn, c·∫≠p nh·∫≠t l·∫°i Reminder v√† Job
      await handleReminderAndJob(userId, mealPlanId, mealDayId, mealId, meal, mealDay);
    }

    res.status(200).json({ success: true, data: meal });
  } catch (error) {
    console.error("üî• L·ªói khi x√≥a m√≥n ƒÉn:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};
